{"version":3,"sources":["CookieColumn/index.js","StatsColumn/index.js","StoreColumn/index.js","App.js","serviceWorker.js","index.js"],"names":["CookieColumn","cookies","cookiesPerSecond","onClickCookie","class","onClick","StatsColumn","allTimeCookies","allTimeClicks","StoreColumn","cursors","buy","cursorPrice","parseInt","cursorUnavailable","className","disabled","App","state","grandmas","tick","addCookies","refreshCookiesPerSecond","setState","prevState","what","price","this","interval","setInterval","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAgBeA,MAdf,YAAqE,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,iBAAkBC,EAAiB,EAAjBA,cACjD,OACE,yBAAKC,MAAM,eACT,uBAAGA,MAAM,MAAMH,GAEf,uBAAGG,MAAM,cAAcF,EAAvB,QAEA,4BAAQE,MAAM,mDAAmDC,QAASF,GACxE,uBAAGC,MAAM,0BCOFE,MAff,YAAyD,IAAlCC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,cACrC,OACE,6BACE,4BACE,4BACE,qDADF,IACuCD,GAEvC,4BACE,oDADF,IACsCC,MCoB/BC,MA5Bf,YAAkD,IAA3BR,EAA0B,EAA1BA,QAAUS,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,IAClCC,EAAcC,SAAS,YAAM,IAAOH,IACpCI,EAAoBb,EAAUW,EAEpC,OACE,6BACE,4BACEG,UAAU,6BACVC,SAAUF,EACVT,QAAS,kBAAMM,EAAI,UAAWC,KAE9B,yBAAKR,MAAM,qCACT,yBAAKA,MAAM,SACT,uBAAGA,MAAM,+BAGX,yBAAKA,MAAM,oBAAX,kBACiB,gCAAUQ,GAAsB,6BAC/C,0BAAMG,UAAU,oBAAhB,kBACmBL,QCkEhBO,E,2MAhFbC,MAAQ,CACNjB,QAAS,EACTC,iBAAkB,EAClBK,eAAgB,EAChBC,cAAe,EAEfE,QAAS,EACTS,SAAU,G,EASZC,KAAO,WACL,EAAKC,WAAyC,GAA9B,EAAKH,MAAMhB,mB,EAG7BoB,wBAA0B,WACxB,EAAKC,UAAS,SAAAC,GACZ,IAAItB,EAAmB,EAIvB,OAHAA,GAAwC,GAApBsB,EAAUd,QAGvB,CAAER,iBAFTA,GAAyC,EAArBsB,EAAUL,c,EAMlCR,IAAM,SAACc,EAAMC,GACX,EAAKH,UAAS,SAAAC,GAAS,gCACpBC,EAAOD,EAAUC,GAAQ,GADL,wBAEZD,EAAUvB,QAAUyB,GAFR,KAKvB,EAAKJ,2B,EAGPnB,cAAgB,WACd,EAAKoB,UAAS,SAAAC,GAAS,MAAK,CAAEhB,cAAegB,EAAUhB,cAAgB,MACvE,EAAKa,WAAW,I,EAGlBA,WAAa,SAAApB,GACX,EAAKsB,UAAS,SAAAC,GAAS,MAAK,CAC1BvB,QAASuB,EAAUvB,QAAUA,EAC7BM,eAAgBiB,EAAUjB,eAAiBN,O,mFArC1B,IAAD,OAClB0B,KAAKC,SAAWC,aAAY,kBAAM,EAAKT,SAAQ,KAE/CO,KAAKL,4B,+BAuCL,OACE,yBAAKP,UAAU,wBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,iBACMY,KAAKT,MADX,CAEEf,cAAewB,KAAKxB,kBAIxB,yBAAKY,UAAU,SACb,kBAAC,EACKY,KAAKT,QAIb,yBAAKH,UAAU,SACb,kBAAC,EAAD,iBACMY,KAAKT,MADX,CAEEP,IAAKgB,KAAKhB,c,GAxENmB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fc820a35.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CookieColumn({ cookies, cookiesPerSecond, onClickCookie }) {\n  return (\n    <div class=\"text-center\">\n      <p class=\"h3\">{cookies}</p>\n\n      <p class=\"text-muted\">{cookiesPerSecond} p/s</p>\n\n      <button class=\"btn btn-outline-dark border-0 p-3 rounded-circle\" onClick={onClickCookie}>\n        <i class=\"fa fa-4x fa-cookie\"></i>\n      </button>\n    </div>\n  );\n}\n\nexport default CookieColumn;\n","import React from \"react\";\n\nfunction StatsColumn({ allTimeCookies, allTimeClicks }) {\n  return (\n    <div>\n      <ul>\n        <li>\n          <strong>All time cookies:</strong> { allTimeCookies }\n        </li>\n        <li>\n          <strong>All time clicks:</strong> { allTimeClicks }\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default StatsColumn;\n","import React from \"react\";\n\nfunction StoreColumn({ cookies,  cursors, buy }) {\n  const cursorPrice = parseInt(15 * (1.2 ** cursors));\n  const cursorUnavailable = cookies < cursorPrice;\n\n  return (\n    <div>\n      <button\n        className=\"btn btn-outline-dark w-100\"\n        disabled={cursorUnavailable}\n        onClick={() => buy('cursors', cursorPrice)}\n      >\n        <div class=\"row no-gutters align-items-center\">\n          <div class=\"col-2\">\n            <i class=\"fas fa-hand-point-up mr-2\"></i>\n          </div>\n\n          <div class=\"col-10 text-left\">\n            Buy cursor for <strong>{ cursorPrice }</strong><br />\n            <span className=\"small text-muted\">\n              Current level: { cursors }\n            </span>\n          </div>\n        </div>\n      </button>\n    </div>\n  );\n}\n\nexport default StoreColumn;\n","import React from \"react\";\n\nimport CookieColumn from \"./CookieColumn\";\nimport StatsColumn from \"./StatsColumn\";\nimport StoreColumn from \"./StoreColumn\";\n\nclass App extends React.Component {\n  state = {\n    cookies: 0,\n    cookiesPerSecond: 0,\n    allTimeCookies: 0,\n    allTimeClicks: 0,\n\n    cursors: 0,\n    grandmas: 0,\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 100);\n\n    this.refreshCookiesPerSecond();\n  }\n\n  tick = () => {\n    this.addCookies(this.state.cookiesPerSecond * 0.1);\n  };\n\n  refreshCookiesPerSecond = () => {\n    this.setState(prevState => {\n      let cookiesPerSecond = 0;\n      cookiesPerSecond += prevState.cursors * 0.1;\n      cookiesPerSecond += prevState.grandmas * 1;\n\n      return { cookiesPerSecond };\n    });\n  }\n\n  buy = (what, price) => {\n    this.setState(prevState => ({\n      [what]: prevState[what] + 1,\n      cookies: prevState.cookies - price,\n    }));\n\n    this.refreshCookiesPerSecond();\n  }\n\n  onClickCookie = () => {\n    this.setState(prevState => ({ allTimeClicks: prevState.allTimeClicks + 1 }));\n    this.addCookies(1);\n  }\n\n  addCookies = cookies => {\n    this.setState(prevState => ({\n      cookies: prevState.cookies + cookies,\n      allTimeCookies: prevState.allTimeCookies + cookies\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid my-3\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <CookieColumn\n              {...this.state}\n              onClickCookie={this.onClickCookie}\n            />\n          </div>\n\n          <div className=\"col-6\">\n            <StatsColumn\n              {...this.state}\n            />\n          </div>\n\n          <div className=\"col-3\">\n            <StoreColumn\n              {...this.state}\n              buy={this.buy}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}